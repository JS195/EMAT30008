import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp
from scipy.optimize import root
from ODEsolver import solve_odes

# Predator-prey function
def predator_prey(X, t, a=1.0, b=0.25, d=0.1):
    x = X[0]
    y = X[1]
    dxdt = x * (1 - x) - (a * x * y) / (d + x)
    dydt = b * y * (1 - (y / x))
    return np.array([dxdt, dydt])

a = 1.0
b=0.25
d=0.1
# Behaviour in the long-time limit
X0 = [1, 1]
t = np.linspace(0, 200, 1000)
sol,t = solve_odes(f=lambda t, X: predator_prey(X, t, a, b, d), x0=X0, t0=0, t1=200, h=0.1, solver='rk4')
plt.plot(t, sol[0], label='prey population')
plt.plot(t, sol[1], label='predator population')
plt.legend()
plt.show()

# Plot the phase portrait
plt.plot(sol[0], sol[1])
plt.xlabel('x')
plt.ylabel('y')
plt.title('Predator-Prey Phase Portrait')
plt.show()

#Defining a phase condition
def predator_prey_pc(x0, a, b, d):
    return predator_prey(x0, 0, a, b, d)[0]

# Iterates over many initial conditions
t0 = 0
t1 = 100
h = 0.01

# Range of initial conditions
x0_range = np.arange(0.1, 1, 0.1)

# Solve ODEs using RK4 method for each set of initial conditions
for i, x0 in enumerate(x0_range):
    # Set initial conditions
    X0 = [x0, 1]
    # Solve ODEs
    sol, t = solve_odes(predator_prey, X0, t0, t1, h, solver='rk4')
    sol = np.array(sol)
    print(sol)

