import numpy as np
import matplotlib.pyplot as plt
import math

def euler_step(f,x,t,dt):
    step = x+dt*f(x,t)
    return step

def solve_to(f,x0,t0,t1,dt_max):
    t=[t0]
    x=[x0]
    while t[-1] < t1:
        dt = min(dt_max, t1 - t[-1])
        step = euler_step(f, x[-1], t[-1], dt)
        t.append(t[-1]+dt)
        x.append(step)
    return np.array(x), np.array(t)

# Calculating errors for a range of dt
def func(x, t): 
    return x
errors = []
x0 = 1
t0 = 0
t1 = 1
dt_max = 0.000001
for i in range(35):
    ans, t = solve_to(func, x0, t0, t1, dt_max)
    error = abs(math.e-ans[-1])
    errors.append(error)
    dt_max = dt_max*1.5
print(ans[-1],t[-1])

#Plotting the errors
tstep = np.linspace(0.000001, 1, 35)
plt.plot(tstep, errors,'r')
plt.xlabel('tstep')
plt.ylabel('absolute error')
plt.title('Size of Timestep Against Error Produced from the Euler Method')
plt.show()



